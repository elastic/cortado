name: Code checks

on:
  pull_request:
    branches: [ "*" ]
    paths:
      - "*.py"
      - "**/*.py"
jobs:
  linting:
    runs-on: ubuntu-latest 
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: '3.12'
      - name: Set up cache
        uses: actions/cache@v4
        id: cached-poetry-dependencies
        with:
          path: ./.venv
          key: venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Create a virtual env
        run: python3 -m venv ./.venv
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config installer.parallel false
          poetry install --with dev
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Lint
        run: |
          poetry run ruff check ./cortado
      - name: Pyright
        run: |
          pyright ./cortado

  unit-tests:
    runs-on: ubuntu-latest 
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Set up cache
        uses: actions/cache@v4
        id: cached-poetry-dependencies
        with:
          path: ./.venv
          key: venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Create a virtual env
        run: python3 -m venv ./.venv
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config installer.parallel false
          poetry install --with dev
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Run tests
        run: |
          poetry run pytest tests/
